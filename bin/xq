#!/usr/bin/env bash
set -Eeuo pipefail
IFS=$'\n\t'

declare -a args
args=("$@")
script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

function msg() {
  echo >&2 -e "${1-}"
}

function help() { ## show this help	 db-exists)
  msg "Usage: xq <action> [arg]*" 
	cat "${BASH_SOURCE[0]}" |  
  grep -oP '[a-z-]+[)]{1}([ ]+)?[#]{2}(.+)$' |
  awk 'BEGIN {FS = ").*?## "}; {printf "\033[36m%-10s\033[0m %s\n", $1, $2}'
}

function ok (){
  echo -n "✔  " && echo  $1
}

function die() {
  local msg=$(echo -n "✘  " && echo $1)
  local code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}

# check if in project root

grep -oP '^XQERL_HOME' .env &>/dev/null || die "you are not call xq from a xQuery project root"
# check required arguments
[[ ${#args[@]} -eq 0 ]] && help && exit
source .env
XQERL_IMAGE=docker.pkg.github.com/grantmacken/alpine-xqerl/xq:$GHPKG_VER
MountAssets="type=volume,target=$XQERL_HOME/priv/static/assets,source=static-assets"


##################
# helpers
##################
function cmdQuery() {
docker exec xq xqerl escript bin/scripts/query.escript "$1"
}

function cmdAssetsMount() {
docker run --rm --interactive \
  --mount "type=volume,target=${XQERL_HOME}/priv/static/assets,source=static-assets" \
  --entrypoint "sh" \
  ${XQERL_IMAGE} -c "$1"
}



#######################
#  xq db CRUD commands for xqerl db
#######################

# [ put {srcFile} ]  Create a db XDM item from a data src file
function dbFilePut() {
  local base="$(echo $1 | grep -oP '^(src/data/)?\K(.+)$')"
  local srcFile="src/data/$base"
  [ -e $srcFile ] || die "[ $srcFile ] unknown file"
  local dirName=$(dirname $base)
  local baseName=$(basename  $base)
  local ext="${baseName##*.}"
  # local resource="${baseName%.*}"
  if echo ${ext} | grep -oP '^(xml|json|csv)$' &>/dev/null
  then  
    docker exec xq xqerl escript bin/scripts/run2.escript store.xq "$base" "$(< $srcFile)"
  elif echo ${ext} | grep -oP '^(md)$' &>/dev/null
    then
      local cmark_img='docker.pkg.github.com/grantmacken/alpine-cmark-gfm/cmark-gfm:0.29.0'
      local cmark_xml=$( cat $srcFile | \
      docker run --rm  --interactive ${cmark_img} --to xml --sourcepos  --validate-utf8 --smart | \
      sed -e '1,2d')
      docker exec xq xqerl escript bin/scripts/run2.escript store.xq "$base" "${cmark_xml}"
  elif echo ${ext} | grep -oP '^(html)$' &>/dev/null
    then
      local tidy_img='docker.pkg.github.com/grantmacken/alpine-htmltidy/htmltidy5:5.7.28'
      local tidy_xml=$(cat $srcFile | docker run --rm  -i ${tidy_img})
      docker exec xq xqerl escript bin/scripts/run2.escript store.xq "$base" "${tidy_xml}"
  else die "can not handle extension [ $ext ]"
  fi
}

# [ link ] Create - a db link to a binary or unparsed text file
function dbLink() {
  local domain=$1
  local base="$(echo $2 | grep -oP '^(src/static_assets/)?\K(.+)$')"
  local srcFile="src/static_assets/$base"
  [ -e $srcFile ] || die "[ $srcFile ] unknown file"
  local dirName=$(dirname $base)
  local baseName=$(basename $base)
  local ext="${baseName##*.}"
  local resource="${baseName%.*}"
  if echo ${ext} | grep -oP '^(svg|js|css|woff2|woff)$' &>/dev/null
  then
    cmdAssetsMount "mkdir -p priv/static/assets/$dirName"
  else
   die "can not handle [ $ext ] extension"
  fi
    local zopfli_img='docker.pkg.github.com/grantmacken/alpine-zopfli/zopfli:0.0.1'
  case "${ext}" in
    svg)
    # ICONS
    #########
    local res_ext='svgz'
    local filename="$XQERL_HOME/priv/static/assets/$dirName/$resource.${res_ext}"
    local uri="http://$domain/$dirName/$resource.${res_ext}"
    local scour_img='docker.pkg.github.com/grantmacken/alpine-scour/scour:0.0.2'
    ## icons asset pipeline
    cat $srcFile | \
    docker run --rm --interactive ${scour_img} | \
    docker run --rm --interactive $zopfli_img | \
    cmdAssetsMount "cat - > $filename"
    ;;
    js)
    # SCRIPTS
    ##########
    local res_ext='js.gz'
    local filename="$XQERL_HOME/priv/static/assets/$dirName/$resource.${res_ext}"
    local uri="http://$domain/$dirName/$resource.${res_ext}"
    ## scripts asset pipeline
    cat $srcFile | \
    docker run --rm --interactive $zopfli_img | \
    cmdAssetsMount "cat - > $filename"
    ;;
    css)
    # STYLES
    ##########
    local res_ext='css.gz'
    local filename="$XQERL_HOME/priv/static/assets/$dirName/$resource.${res_ext}"
    local uri="http://$domain/$dirName/$resource.${res_ext}"
    local cssnano_img='docker pull docker.pkg.github.com/grantmacken/alpine-cssnano/cssnano:0.0.3'
    cat $srcFile | \
    docker run --rm --init --interactive  ${cssnano_img} 2>/dev/null | \
    docker run --rm --interactive $zopfli_img | \
    cmdAssetsMount "cat - > $filename"
    ;;
    *) 
      # no pipeline catch
      # fonts:  woff, woff2
    local res_ext=${ext}
    local filename="$XQERL_HOME/priv/static/assets/$dirName/$resource.${res_ext}"
    local uri="http://$domain/$dirName/$resource.${res_ext}"
    # no pipeline
    cat $srcFile | \
    cmdAssetsMount "cat - > $filename"
    esac
   # create link
    cmdQuery "db:link('$filename','$uri')" &>/dev/null
   echo -n '1. file: '
    cmdAssetsMount "ls $filename"
   echo -n '2. db link: '
   dbList http://$domain/$dirName | grep -oP "http://$domain/$dirName/$resource.${res_ext}"
 }

# utility for Read actions
function dbItemType() {
  docker exec xq xqerl escript bin/scripts/run.escript \
    db-item-type.xq $1
  }

# [ get ]  Read - given uri get db XDM item
function dbGetItem() {
  local resource="http://$(echo $1 | grep -oP '^(http://)?\K(.+)$')"
  local itemType=$(dbItemType $resource)
  if echo ${itemType} | grep -oP '^(document-node)$' &>/dev/null
  then
  case "${#args[@]}" in
    2) 
    cmdQuery \
    "try{('${resource}' 
    => doc()) 
    => serialize(map{'omit-xml-declaration': true() })
    } catch * {()}"
    ;;
    3) 
    local xpath="${args[2]}"
    echo ${xpath} | \
      grep -oP '^/(.+)$' &>/dev/null || \
      die 'arg  must be a xpath expression'
    cmdQuery \
    "try{('${resource}' 
    => doc())${xpath} 
    => serialize(map{'omit-xml-declaration': true() })
    } catch * {()}"
    ;;
    4) 
    local xpath="${args[2]}"
    local op_expr="${args[3]}"
    echo "${xpath}" | \
      grep -oP '^/(.+)$' &>/dev/null || \
      die 'arg {xpath} must be a xpath expression'
    echo "${op_expr}" | \
      grep -oP '^(=>|!)(.+)$' &>/dev/null || \
      die 'arg starts with arrow or bang operator'
    cmdQuery \
    "try{('${resource}' 
    => doc())${xpath} ${op_expr}
    } catch * {()}"
    ;;
    *)
    die '- incorrect number of args: {db-uri} {lh-expr}? {(!|=>) (rhs-expr)}?'
  esac
  elif echo ${itemType} | grep -oP '^(array|map)$' &>/dev/null
  then
  case "${#args[@]}" in
    2) 
    cmdQuery \
    "try{('${resource}' 
    => db:get())
    => serialize(map{'method': 'json' })
    } catch * {()}"
    ;;
    3)
    if echo "${args[2]}" | grep -oP '^[?]{1}' &>/dev/null
    then
    local lookup="${args[2]}"
    cmdQuery \
    "try{('${resource}' => db:get())${lookup} 
        =>  for-each(function(\$item){ \$item => serialize(map{'method': 'json' }) } )
    } catch * {()}"
elif echo "${args[2]}" | grep -oP '^(=>|!)' &>/dev/null
    then
    local expr="${args[2]}"
    cmdQuery \
    "try{\
    ('${resource}' => db:get()) ${expr}
    } catch * {()}"
    else
      die 'arg must be a lookup or arrow expression'
    fi
    ;;
    4) 
    local lookup="${args[2]}"
    local op_expr="${args[3]}"
    echo "${lookup}" | \
      grep -oP '^[?]{1}' &>/dev/null || \
      die 'arg must be a lookup expression'
    echo ${op_expr} | \
      grep -oP '^(=>|!)(.+)$' &>/dev/null || \
      die 'arg starts with arrow or bang operator'
    cmdQuery \
    "try{('${resource}' 
    => db:get())${lookup} ${op_expr}
    } catch * {()}"
    ;;
    *)
    die '- incorrect number of args: {db-uri} {lh-expr}? {(!|=>) (rhs-expr)}?'
    esac
  else
    die '- wrong args: {db-uri} {lh-expr}? {(!|=>) (rhs-expr)}?'
  fi
}

# [ get ]  Read - given uri get db XDM item
function dbGetItemPath() {
  local resource="http://$(echo $1 | grep -oP '^(http://)?\K(.+)$')"
  local itemType=$(dbItemType $resource)
  case "$itemType" in
    document-node)
      local xpath="${args[2]}"
      echo ${xpath} | grep -oP '^/(.+)$' &>/dev/null || die 'arg [ xpath ] must be a xpath expression'
      cmdQuery \
        "try{('${resource}' => doc())${xpath} => serialize(map{'omit-xml-declaration': true() })} catch * {()}"
      ;;
    array) #TODO
      local lookup="${args[2]}"
      cmdQuery \
        "try{('$resource' => db:get()) => serialize(map{'method': 'json' })} catch * {()}"
      ;;
    map) # TODO
      local lookup="${args[2]}"
      cmdQuery \
        "try{('$resource' 
              => db:get())${lookup} 
              => serialize(map{'method': 'json'})
            } catch * {()}"
      ;;
    *)
      die "[ $itemType ] unknown XDM item"
  esac
}

# TODO  [ get ]  Read - db link 
function dbGetLink() {
  local local resource="http://$(echo $1 | grep -oP '^(http://)?\K(.+)$')"
  local collection=$(dirname $resource)
  if [ -n "$(dbList $collection | grep -oP "^${resource}$")" ]
    then
    ok "resource in db: [ $resource ]"
    cmdQuery  "'$resource' => db:get()" 
  else
    die "resource NOT found in db: [ $resource ]"
  fi
}

# [ list ] Read - list db uri collections
function dbList() {
  local path="http://$(echo $1 | grep -oP '^(http://)?\K(.+)$')"
  cmdQuery \
    "try { ('$path' => uri-collection()) => string-join('&#10;') } catch * {()}" 
}

# [ available ] Read - is db item available
function isAvailable() {
  local resource="http://$(echo $1 | grep -oP '^(http://)?\K(.+)$')"
  cmdQuery \
    "( '$resource' = ( remove( \
        '$resource' => \
        tokenize('/'),'$resource' => \
        tokenize('/') => \
        count()\
        )\
      ) => \
      string-join('/')  => \
      string() => \
      uri-collection()\
    ) => string()"
}

function dbUpdate() {
  local resource="http://$(echo $1 | grep -oP '^(http://)?\K(.+)$')"
  if isDocAvailable $resource &> /dev/null
  then
    cmdQuery \
      "'$resource' => doc() => serialize()"
    else die "xQuery update facilty only available for XML documents[ $ext ]"
  fi
}

# [ delete ] Delete - delete a single XDM or link item
function dbDeleteItem() {
  local resource="http://$(echo $1 | grep -oP '^(http://)?\K(.+)$')"
  if "$( isDocAvailable $resource )"
  then
    cmdQuery  "'$resource' => db:delete()"
    ok "resource deleted from db: [ $resource ]"
  else 
    if isAvailable $resource
      then
      cmdQuery  "'$resource' => db:delete()" &>/dev/null
      ok "resource deleted from db: [ $resource ]"
    else
      die "resource NOT found in db: [ $resource ]"
    fi
  fi
}

function dbDomainExists() {
  local resource="http://$(echo $1 | grep -oP '^(http://)?\K(.+)$')"
 docker exec xq xqerl escript bin/scripts/call.escript \
    "xqldb_db_server"  "exists" "$resource"
 #docker exec xq xqerl escript bin/scripts/call.escript "xqldb_lib"  "filename_to_uri" "/tmp/markup.nz"
  }

function doCall() {
  docker exec xq xqerl escript bin/scripts/call.escript \
    "$1" "$2" "$3"
  }
# utility: available XML docs
function isDocAvailable() {
  cmdQuery \
  "try {'$1' => doc-available() => string()} catch * { 'false' }"
}

function getDoc() {
  cmdQuery \
    "'$1' => doc() => serialize(map{'omit-xml-declaration': true() })"
}

function dbDeleteCollection() { 
 echo 'TODO'
}

function doCompile() { 
  local base="$(echo $1 | grep -oP '^(src/(main_modules|library_modules)/)?\K(.+)$')"
  if [ -e src/main_modules/$base ] ;then  
   docker cp src/main_modules/$base xq:/usr/local/xqerl/code/src/$base 
  else 
    if [ -e src/library_modules/$base ] ; then
      docker cp src/library_modules/$base xq:/usr/local/xqerl/code/src/$base 
    else die "[ $1 ] unknown file"
    fi
  fi
  docker exec xq xqerl escript bin/scripts/compile.escript  "code/src/$base"
}

function doRun() { 
  local base="$(echo $1 | grep -oP '^(src/main_modules/)?\K(.+)$')"
  local srcFile="src/main_modules/$base"
  [ -e $srcFile ] || die "[ $srcFile ] unknown file"
  docker cp $srcFile xq:/usr/local/xqerl/code/src/$base 
  docker exec xq xqerl escript bin/scripts/run.escript  $1 "$2"
}

function doRec() {
  local uri="$1"
  local xpath="$2"
  cmdQuery \
    "declare default element namespace 'http://www.w3.org/1999/xhtml'; \
    try{(<http:request method='get' href='$uri' /> => http:send-request())[2]${xpath} => \
    serialize()} catch * {()}"
}

function doLookup() {
  local uri="$1"
  local lookup="$2"
  cmdQuery \
    "try{('${uri}' => json-doc())${lookup} } catch * {()}" 
}

# "rename" "node" TargetExpr "as" NewNameExpr
function dbUpdateRename() {
  local resource="http://$(echo ${1} | grep -oP '^(http://)?\K(.+)$')"
  echo "${args[3]}" | grep -oP '^(node)$' &>/dev/null || die 'arg [ node ] must be included '
  echo "${args[4]}" | grep -oP '^/(.+)$' &>/dev/null || die 'arg [ target ] must be a xpath expression'
  echo "${args[5]}" | grep -oP '^(as)$' &>/dev/null || die 'arg [ as ] must be included'
  cmdQuery \
"declare %updating function local:update(){
 for \$var in ('${resource}' => doc())${args[4]}
 return 
  rename node (\$var) as ${args[6]}
}; 
try{(local:update(),'ok')} catch * { 'error: failed'}"
}

# xq update example.com/examples/works.xml replace node '//employee[1]/hours[1]' with '<hours>25</hours>'
function dbUpdateReplace() {
  local resource="http://$(echo ${1} | grep -oP '^(http://)?\K(.+)$')"
  echo "${args[3]}" | grep -oP '^(node|value of node)$' &>/dev/null || die 'arg must be [ node | value of node ] '
  echo "${args[4]}" | grep -oP '^/(.+)$' &>/dev/null || die 'arg [ target ] must be a xpath expression'
  echo "${args[5]}" | grep -oP '^(with)$' &>/dev/null || die 'arg [ with ] must be included'
cmdQuery \
    "declare %updating function local:update(){
      for \$var in ('${resource}' => doc())${args[4]}
        return replace ${args[3]} \$var with ${args[6]}
      };
    try{(local:update(),'ok')  } catch * {false()}"
}

# DeleteExpr  "delete" ("node" | "nodes") TargetExpr
# xq update example.com/examples/works.xml delete node /works/employee[1]/hours[1]'
function dbUpdateDelete() {
  local resource="http://$(echo ${1} | grep -oP '^(http://)?\K(.+)$')"
  echo "${args[3]}" | grep -oP '^(node|nodes)$' &>/dev/null || die 'arg must be [ node | nodes ] '
  echo "${args[4]}" | grep -oP '^/(.+)$' &>/dev/null || die 'arg [ target ] must be a xpath expression'
  # echo ' - xQuery updating expression ' 
  # echo "> delete ${args[3]} ('${resource}' => doc())${args[4]}"
  cmdQuery \
    "declare %updating function local:update(){
      for \$var in ('${resource}' => doc())${args[4]}
        return delete ${args[3]} \$var 
      };
    try{(local:update(),'ok')  } catch * {false()}"
  }

# xq update example.com/examples/works.xml insert node '<hours>25</hours>' after '/works[1]/employee[1]/hours[1]'
function dbUpdateInsert() {
  local resource="http://$(echo ${1} | grep -oP '^(http://)?\K(.+)$')"
  echo "${args[3]}" | grep -oP '^(node|nodes)$' &>/dev/null || die 'arg must be [ node | nodes ] '
  #local qualifier="${args[3]}"
  #local items="${args[4]}" # should be parsable?
  echo "${args[5]}" | grep -oP '^(into|before|last|after|as (first|last) into)$' &>/dev/null || \
    die '{where} one of [ into | before | last | as first into | as last into  ]'
  #local where="${args[5]}"
  echo "${args[6]}" | grep -oP '^/(.+)$' &>/dev/null || die 'arg [ target ] must be a xpath expression'
  #local xpath="${args[6]}"
  #echo ' - xQuery updating expression ' 
  #echo "> insert $qualifier $items $where ('${resource}' => doc())${xpath}"
cmdQuery \
"declare %updating function local:update(){
  for \$var in ('${resource}' => doc())${args[6]}
    return insert ${args[3]} ${args[4]} ${args[5]} \$var 
  };
try{(local:update(),'ok')  } catch * {false()}"
}

case "${args[0]}" in
  test)

    ;;
  put) ## {domain}/{path} create xdm item from file. example: `xq put example.com/usecase/employees.xml`
    case "${#args[@]}" in
      2) 
        dbFilePut ${args[1]}
        ;;
      *)
        die '- xq put {path} : incorrect number of args'
    esac
    ;;
  list) ## {domain/path} list resources. example: `xq list example.com/usecase`
    dbList ${args[1]}
    ;;
  available) ## {domain/path} list resources. example: `xq list example.com/usecase`
    isAvailable "${args[1]}"
    ;;
  get) ## {domain}/{path} retrieve and serialize resource . example: `xq get example.com/usecase/employees.xml`
    res="${args[1]}"
    base=$(basename -- "$res")
    ext="${base##*.}"
    #  local regItem="^(xml|array|map)$"
    if echo ${ext} | grep -oP '^(svgz)$' &>/dev/null
    then dbGetLink ${res}
    elif echo ${ext} | grep -oP '^(xhtml|cmark|article|xml|array|map)$' &>/dev/null
    then
      #case "${#args[@]}" in
      #  2) 
          dbGetItem "${args[1]}"
      #    ;;
      #  3)
      #    dbGetItemPath "${args[1]}"
      #    ;;
      #  *)
      #    die ' incorrect number of args'
     # esac
    else die "can not handle extension [ $ext ]"
    fi
    ;;
  update) ## {db-uri} {xpath-expression} {update-expression} update XML db resource
    # example
    # this will be a updating function
    # for $var in ('http://example.com/examples/employees.xml' => doc())/employees/employee[1]  (: selection :)
    # return rename node ($var) as "employee1    (: update :)
    #############################################################
    # for $var in ('${uri}' => doc())${xpath}  (: selection :)
    # return ${kw} ${qualifier} ($var) as {what}    (: update :)
    # xq update 
    # selection part: {uri} {xpath}
    # update part: {kw} {qualifier} {what}
    # xq update example.com/examples/employees.xml '/employees/employee[1]' rename node 'employee1'
    resource="http://$(echo ${args[1]} | grep -oP '^(http://)?\K(.+)$')"
    isDocAvailable "${resource}" &> /dev/null || die ' doc not available'
    kw="${args[2]}"
    # echo -n " - with doc ${kw} "
    case "$kw" in
      insert)
       #xq update example.com/examples/works.xml insert node '<hours>60<hours>' after '//employee[1]/hours[1]'
        case "${#args[@]}" in
          7) 
            dbUpdateInsert "${args[1]}"  "${args[2]}"
            ;;
          *)
            die '- xq {db-uri} {keyword1} {keyword2} {items} {where} {target}  : incorrect number of args'
        esac
      ;;
      delete)
        #xq put example.com/examples/works.xml delete node  '/works[1]/employee[3]/hours[1]'
        case "${#args[@]}" in
          5) 
            dbUpdateDelete "${args[1]}"  "${args[2]}"
            ;;
          *)
            die '- xq {db-uri} {keyword1} {keyword2} {xpath} : incorrect number of args'
        esac
        ;;
        replace)
        # replace node location with items
        case "${#args[@]}" in
          7) 
            dbUpdateReplace "${args[1]}" 
            ;;
          *)
            die '- xq update {db-uri} replace {[node|nodes]} {xpath} with {items} : incorrect number of args'
        esac
        ;;
      rename)
        # rename node location as name-expression
        case "${#args[@]}" in
          7) 
            dbUpdateRename "${args[1]}" 
            ;;
          *)
            die '- xq update {db-uri} rename node {xpath} as {name} : incorrect number of args'
        esac
        ;;
        *)
        die 'xq update {uri} [ insert | delete | replace | rename ] '
    esac
    ;;
  delete) ## {domain}/{path} delete resource from db. example: `xq delete example.com/static-assets/icons/article.svg`
      case "${#args[@]}" in
        2) 
          dbDeleteItem "${args[1]}"
          ;;
        *)
          die '- xq delete {db-uri} : incorrect number of args'
      esac
   ;;
  #domain) # {domain} check if domain exists in db. example: `xq db-exists example.com` 
  #  dbDomainExists ${args[1]}
  # ;;
  #type) TODO {domain}/{path} get xdm type. example: `xdm item-type example.com/usecase/employees.xml`
  # dbItemType ${args[1]}
  # ;;
  #put-raw) # {domain}/{path} put unparsed txt file into db`
   # dbRawTextPut ${args[1]}
   # note: there is no conversion to XDM item. 
   # note: json will remain as unparsed json unlike `put` which
   # note: will create out the origin an XDM item (map or array) 
   # note: and put into the the db
   # note: csv  will remain as unparsed csv  
   # note: `$href  => unparsed-text()`
   # note: `$href  => unparsed-text-lines()`
   # note: `$href  => json-doc()`
  # ;;
  link) ## {domain} {asset-path} link to preprocessed binary asset` example:` xq link example.com icons/article.svg`
  [[ ${#args[@]} -eq 3 ]] || die 'xq eval: requires 2 params {domain} {path}'
  dbLink "${args[1]}" "${args[2]}"
  ;;
  # xQuery actions [ query | compile | run ] 
  # ========================================
  query) ## {xquery-string} run a simple xQuery. example: `xq query "current-date() => string()"`
    cmdQuery  "${args[1]}"
    ;;
  req) ## {uri} {xpath} HTML doc, apply xpath expression. example: `xq req "http://example.com" "/*"`
    [[ ${#args[@]} -eq 3 ]] || die 'xq req: requires 2 params {uri} {xpath}'
   doRec  "${args[1]}" "${args[2]}"
    ;;
  lookup) ## {uri} {lookup} JSON doc, apply lookup expression. example: xq lookup https://api.publicapis.org/entries '?count=>string()'
   [[ ${#args[@]} -eq 3 ]] || die 'xq lookup: requires 2 params {uri} {lookup-expression}'
   doLookup  "${args[1]}" "${args[2]}"
    ;;
  compile) ## {path} xQuery module. example: `xq compile src/main_modules/store.xq`
    doCompile "${args[1]}"
    ;;
  run) ## {name}.xq {arg} run xQuery with external arg. example: `xq run turtles.xq turtles`
    [[ ${#args[@]} -eq 3 ]] || die 'xq run: requires 2 params {name}.xq {arg}'
    doRun  "${args[1]}" "${args[2]}"
    ;;
 call) ## {module} {function} {arg} call available xqerl module functions. example: `xq call xqldb_db_server exists http://example.com
    [[ ${#args[@]} -eq 4 ]] || die 'xq call: requires 3 params {module} {function} {arg}'
    doCall ${args[1]} ${args[2]} ${args[3]}
    ;;
 eval) ## {eval-string} evaluate available xqerl erlang expressions: `xq eval 'calendar:local_time().'
    [[ ${#args[@]} -eq 2 ]] || die 'xq eval: requires 1 params {eval-string}'
    docker exec xq xqerl eval "${args[1]}"  
    ;;
 sh)  ## {cmd-string} run alpine busybox shell commands: `xq sh 'date -I'
      docker exec xq /bin/sh -c "${args[1]}"
      ;;
  format)
       tidy "${args[1]}"
      ;;
 init) 
    initBin
    ;;
  *)
    help
    die 'unknown action try one of the above actions'
esac
